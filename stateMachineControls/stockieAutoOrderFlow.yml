role: arn:aws:iam::#{AWS::AccountId}:role/StepFunctionsLambdaRole
events:
  - schedule: cron(45 14 ? * MON-FRI *)
name: StockieAutoOrderFlow-${self:provider.stage}
tracingConfig:
  enabled: true
loggingConfig:
  level: ERROR
  includeExecutionData: true
  destinations:
    - Fn::GetAtt: [StepsLogs, Arn]
alarms:
  topics:
    ok: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:StockieBotTopic
    alarm: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:StockieBotTopic
  metrics:
    - executionsTimedOut
    - executionsFailed
    - executionsAborted
    - executionsSucceeded
  treatMissingData: missing
definition:
  Comment: 'Stockie bot auto ordering flow'
  StartAt: RunMarketStatus
  States:
    RunMarketStatus:
      Type: Task
      Resource:
        Fn::GetAtt: [getMarketStatus, Arn]
      Next: IsMarketOpen
    IsMarketOpen:
      Type: Choice
      Choices:
        - Variable: '$.is_open'
          BooleanEquals: true
          Next: GetTodaysStocks
        - And:
            - Variable: '$.stage'
              StringEquals: 'prod'
            - Variable: '$.is_open'
              BooleanEquals: false
          Next: 'No-op'
      Default: GetTodaysStocks
    GetTodaysStocks:
      Type: Task
      Parameters:
        minPrice: 2
        maxPrice: 13
        increasePercentage: 3.5
      Resource:
        Fn::GetAtt: [getDailyStockList, Arn]
      Retry: ${file(stateMachineControls/Retry.yml):RetryFromErrors}
      Next: AvailableStocks
    AvailableStocks:
      Type: Choice
      Choices:
        - Variable: '$.tickers'
          IsNull: false
          Next: MACDCheck
        - Variable: '$.tickers'
          IsNull: true
          Next: 'No-op'
    MACDCheck:
      Type: Map
      ItemsPath: '$.tickers'
      Iterator:
        StartAt: StocksToBuy
        States:
          StocksToBuy:
            Type: Task
            Resource:
              Fn::GetAtt: [stockToBuy, Arn]
            Retry: ${file(stateMachineControls/Retry.yml):RetryFromErrors}
            TimeoutSeconds: 300
            End: true
      Next: CalculateOrderAmount
    CalculateOrderAmount:
      Type: Task
      Resource:
        Fn::GetAtt: [calculateOrderAmount, Arn]
      Retry: ${file(stateMachineControls/Retry.yml):RetryFromErrors}
      TimeoutSeconds: 300
      Next: AreThereOrdersToPlace
    AreThereOrdersToPlace:
      Type: Choice
      Choices:
        - Variable: '$.sharesToBuy'
          IsNull: false
          Next: PlaceOrders
        - Variable: '$.sharesToBuy'
          IsNull: true
          Next: 'No-op'
    PlaceOrders:
      Type: Map
      ItemsPath: '$.sharesToBuy'
      Iterator:
        StartAt: CreateNewOrders
        States:
          CreateNewOrders:
            Type: Task
            Resource:
              Fn::GetAtt: [createNewOrder, Arn]
            Retry: ${file(stateMachineControls/Retry.yml):RetryFromErrors}
            Catch:
              - ErrorEquals: ['States.ALL']
                Next: CatchAllFallback
            End: true
          CatchAllFallback:
            Type: Pass
            Result: 'This is a fallback from a reserved error code'
            End: true
      End: true
    No-op:
      Type: Pass
      End: true
